SelectAll
	selectAll 주로 여러행을 검색하는데 사용
	조건없이 데이터베이스의 모든 데이터를 가져오는 경우 WHERE절을 사용해서 일치하는 모든 행을 검색할 때 사용
	결과는 주로 리스트나 배열 컬렉션 형식으로 반환
	여러 개의 결과를 반환할 수 있고, 결과가 없을 수 있음

connection을 사용해서 url, username, password를 연결해준다

String [select 코드를 담을 변수명] = "select 쿼리 작성";
//만약 테이블(혹은 뷰)을 찾을 수 없습니다. 가 나올 경우
//sql developer 방문하여 워크시트 실행 후 쿼리문 실행 테스트해보기
//commit 안했는지 확인해보기

//Connection을 사용해서 DateBase와 연결
//JDBCurl에는 IP와 포트번호 SID포함
Connection con = DriverManger.getConnection(JDBCurl,유저명,유저비밀번호);


//쿼리의 경우 "" 글자문을 넣기 때문에 String을 사용
String selectQuery = "SELECT * FROM 테이블명";
								//order by나 where절 추가 가능

//PreparedStatement 사용해서 SQL쿼리를 수행할 준비
PreparedStatement ps = con.prepareStatement(selectQuery);

//ResultSet executeQuery() 메서드를 호출하여 SQL SELECT 쿼리를 실행하고 그 결과를 ResultSet 객체에 저장
//ResultSet 결과 집합을 표현하는 객체

ResultSet에 담은 결과 집합을 next()를 사용하여 확인

구조 : 
	ResultSet result = 
	while(result.next()){} //로 표기
	- ResultSet 객체에서 다음 행으로 이동함을 표시
	- next() : 다음 행이 있으면 true를 반환하고, 아니면 false를 반환하는 메서드
				> 결과 집합에 더 많은 행이 있는 경우 행이 종료될 때까지 루프를 계속 실행
	
	try {
	
		while(result.next()){
	
		 //xxx 		변수명 = result.getxxx("DB 테이블에서 불러올 컬럼");
		   int accountID = result.getInt("account_id");
		   						   //값을 추출할 때 예약어에 맞는 값을 넣고 추출
		}
		
	} catch() {
	
		try-catch 블ㄹ록 사용하여 쿼리 실행 중 발생할 수 있는 예외 처리
		
	}
				